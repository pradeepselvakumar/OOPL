"""
import statements as needed
"""

# create a restaurant with name and address
restaurant = Restaurant("Gourmet Delight", "123 Main St, Boston, MA");

# add some tables to the restaurant, with specific seating capacity
restaurant.add_table(Table(name = "Five-1", seats = 5))
restaurant.add_table(Table("Five-2", 5))
restaurant.add_table(Table("Three-1", 3))
restaurant.add_table(Table("Four-1", 4))

# this should print the list of tables as shown below:
# {'name': 'Five-1', 'seats': 5}
# {'name': 'Five-2', 'seats': 5}
# {'name': 'Three-1', 'seats': 3}
# {'name': 'Four-1', 'seats': 4}
# hint: See https://stackoverflow.com/a/193539
restaurant.print_tables()

# get max occupancy
max_occupancy = restaurant.get_max_occupancy()

# returns a list of Table objects
tables = restaurant.get_tables()

# should be able to remove a table by name
restaurant.remove_table("Four-1")

# should be able to remove a table by object instance 
restaurant.remove_table(tables[0])

# add some waiters to the restaurant
# For some sample names, use https://1000randomnames.com/
restaurant.add_waiter(Waiter(name = "Marshall Owen", id = "W-001"))
restaurant.add_waiter(Waiter(name = "Monique Lister", id = "W-003"))
restaurant.add_waiter(Waiter(name = "Joel Miller", id = "W-004"))

# prints the list of waiters, similar to print_tables()
restaurant.print_waiters()

# returns a list of Waiters
waiters = restaurant.get_waiters()

# should be able to remove waiter by name or id
restaurant.remove_waiter("Marshall Owen")
restaurant.remove_waiter("W-003")

# assigns a waiter a to a table.
# each table can only have one waiter assigned,
# so last waiter assigned wins
tables[0].assign_waiter("waiter name or id")

# add some menuitems
restaurant.add_menu_item(MenuItem(name = "Dumplings", price = 4.20))
restaurant.add_menu_item(MenuItem(name = "Fried Calamani", price = 8.75))

# should be able to remove a menuitem by name
restaurant.remove_menu_item("Dumplings")

# returns a list of menuitems
menu = restaurant.get_menu_items()

patron1 = Patron(name = "Ariana Serrano")
patron2 = Patron(name = "Yusuf Jacobson")

group1 = Group([patron1, patron2])

group2 = Group()
group2.add_patron(Patron(name = "Caspian McClain"))

# should find an unoccupied table with enough seats to 
# assign group. If no table is found, should be added to waitlist
restaurant.assign_table(group2)

# returns a list of groups
waitlist = restaurant.get_waitlist()

# removes a waitlisted group
restaurant.remove_from_waitlist(waitlist[1])

# returns a list of tables that are available
available_tables = restaurant.get_available_tables()

# This is called when patrons leave
tables[0].unassign()

# should return a string like '5/14 seats occupied'
current_occupancy = restaurant.get_current_occupancy()

# can order by both name and menu_item object
patron1.order(menu_items[0])
patron2.order("French Fries")

# returns a list of orders for the patron
orders = patron1.get_orders()

# returns a list of orders for the table
table_orders = tables[0].get_orders()


"""
table.print_status() should print the following
Waiter: [Waiter name]
Seats: [# of seats]
occupied: [True or False]
Patrons: [# of patrons]
Menu items ordered: [# of menu items ordered]
Order total: [The total of the order]
"""
tables[1].print_status()

# returns the total for a table
order_total = tables[0].get_total()

"""
restaurant.print_status() should print the following:
Name:
No. of tables:
Total number of seats:
Total waiters:
No. of available tables:
No. of waitlisted groups:
No. of waitlisted patrons:
No. of current orders:
$ total of current orders:
"""
restaurant.print_status()

"""
General Notes:
All methods should return or print error messages appropriately.
e.g. Someone orders a menu item that does not exist.
"""
